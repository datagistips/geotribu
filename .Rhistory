}
reformatYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
# myLine <- "L'Open Data en image** tototototo"
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
# myLine <- " **OpenLayers Mobile**"
myLine <- ![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG
# myLine <- "L'Open Data en image** tototototo"
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
# myLine <- " **OpenLayers Mobile**"
myLine <- "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG"
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.*)"
grepl(regex, myLine)
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.*)?"
grepl(regex, myLine)
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.?)"
grepl(regex, myLine)
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*"
grepl(regex, myLine)
myLine
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
grepl(regex, myLine)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
myLine <- "L'Open Data en image** tototototo"
grepl("^\\s?(.*)\\*\\*(.*)", myLine)
myLine <- " **OpenLayers Mobile**"
grepl("^\\s?\\*\\*.*\\*\\*", myLine)
myLine <- "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG"
isNotWellFormatted1 <- function(myLine) {
grepl("^(###?\\s)?.*\\*\\*", myLine)
}
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
isNotWellFormatted2 <- function(myLine) {
grepl("^###?\\s?\\*\\*", myLine)
}
# myLine <- "L'Open Data en image** tototototo"
isNotWellFormatted3 <- function(myLine) {
grepl("^\\s?(.*)\\*\\*(.*)", myLine)
}
# myLine <- " **OpenLayers Mobile**"
isNotWellFormatted4 <- function(myLine) {
grepl("^\\s?\\*\\*.*\\*\\*", myLine)
}
# countHashtags("## L'Open Data en image** tototototo")
# countHashtags("### L'Open Data en image** tototototo")
# countHashtags("#### L'Open Data en image** tototototo")
countHashtags <- function(myLine) {
n <- 0
for(i in 1:4) {
hashtags <- paste(rep("#", i), collapse="")
if(grepl(sprintf("^%s\\s.*", hashtags), myLine)) n <- i
}
return(n)
}
getNotWellFormatted <- function(lines) {
w <- which(sapply(1:length(lines), function(x) isNotWellFormatted(lines[[x]])))
return(list(w = w, lines = lines[w]))
}
reformatTitle <- function(myLine) {
hashtags <- rep("#", countHashtags(myLine)) %>% paste(collapse="")
if(hashtags == "") {
regex <- "^\\s?(?:\\*\\*)?(.*)\\*\\*\\s?(.*)$"
str_replace(myLine, regex, "### \\1\n\\2")
} else {
regex <- sprintf("^(?:%s?\\s)?(.*)\\*\\*\\s?(.*)$", hashtags)
str_replace(myLine, regex, sprintf("%s \\1\n\\2", hashtags))
}
}
# reformatTitle(myLine)
imgPar <- function(img) {
regex <- "^.*!\\[(.*)\\]\\((.*)\\).*$"
imgLogo <- gsub(regex, "\\1", img)
s <- gsub("^.*!\\[(.*)\\]\\((.*)\\).*$", "\\2", img)
imgUrl <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\1", s)
imgCat <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\2", s)
img <- list(imgLogo = imgLogo, imgUrl = imgUrl, imgCat = imgCat)
return(img)
}
buildRegex <- function(i) {
sprintf(".*%s.*", paste(rep(regex, i), collapse=".*"))
}
countLinks <- function(test) {
r <- "(!\\[.*\\]\\(.*\\))"
n <- 0
for(i in 1:5) {
r2 <- buildRegex(i)
if(grepl(r2, test)) n <- i
}
return(n)
}
# s <- "![logo1 globe1](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\") ![logo2 globe2](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\"){: .img-rdp-news-thumb }"
# getImgs(s)
getImgs <- function(test) {
n <- countLinks(test)
out <- vector(mode="list")
for(i in 1:n) {
imgLink <- gsub(buildRegex(n), sprintf("\\%d", i), test)
out[[i]] <- imgPar(imgLink)
}
return(out)
}
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
l <- list.files("-new.md", rdpFolder)
l
rdpFolder
l <- list.files(sprintf("%s/%d", rdpFolder, year), "-new.md", full.names = T)
l
for(elt in l) {
print(gsub("-new.md", ".md", elt))
}
for(elt in l) {
file.rename(gsub("-new.md", ".md", elt))
}
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
}
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
file.remove(elt)
}
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
rdpFolder
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted1(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
lines
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted1(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
rdpFolder <<- "../website/content/rdp"
reformatYear <- function(year) {
# Liste les fichiers du dossier, pour l'année concernée
l <- list.files(sprintf("%s/%d", rdpFolder, year), full.names = T)
l <- l[which(grepl("^(?!.*(new|old)).*$", l, perl = TRUE))] # only not new and not old files
# Transformation fichier par fichier
for(i in 1:length(l)) {
print(i)
# i <- 51
fileName <- gsub(".*/(.*)$", "\\1", l[i])
message("Analyse du fichier ", fileName)
# Lecture du fichier
f <- l[i]
con <- file(f, "r", encoding = "UTF-8")
lines <- readLines(con)
length(lines)
close(con)
# Line by Line
# res <- getNotWellFormatted(lines)
for(i in 1:length(lines)) {
myLine <- lines[i]
if(isNotWellFormatted(myLine)) {
message("pre1 : ", substr(lines[i], 1, 50))
lines[i] <- reformatTitle(myLine)
message("post1 : ", substr(lines[i], 1, 50))
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
regex <- "(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
if(grepl(regex, myLine)) {
message("pre2 : ", substr(lines[i], 1, 50))
lines[i] <- str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n\n### \\2\n\\3")
message("post2 : ", substr(lines[i], 1, 50))
}
}
# Export ---
outputName <- gsub(".md", "-new.md", f)
con <- file(outputName)
writeLines(lines, con)
close(con)
# Image
# test <- lines[85]
# getImgs(test)
}
}
reformatYear(2011)
l <- list.files(sprintf("%s/%d", rdpFolder, year), "-new.md", full.names = T)
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
file.remove(elt)
}
