reformatLine <- function(myLine) {
newLine <- NULL
# Avec hashtags ou pas
if(isNotWellFormatted1(myLine)) {
newLine <- reformatTitle1(myLine)
}
# Avec une image au début
if(isNotWellFormatted2(myLine)) {
newLine <- reformatTitle2(myLine)
}
return(newLine)
}
# 04-06-2012
rdp <- "../../rdp//2012/rdp_2012-04-06.md"
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
lines
myLine <- lines[121]
removeLeadingSpace <- function(myLine) {
trimws(myLine, which = "left")
}
removeLeadingSpace(myLine)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
rdp <- "../../rdp//2012/rdp_2012-04-06.md"
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
close(con)
## SUppression des espaces
myLine <- lines[121]
myLine
grep("\\s+.*", myLine)
grepl("\\s+.*", myLine)
removeLeadingSpace(myLine)
grepl("\\s+.*", "toto")
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
grepl("\\s{1,2}.*", myLine)
myLine
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
# 04-06-2012
rdp <- "../../rdp//2012/rdp_2012-04-06.md"
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
close(con)
lines
lines[1]
lines[2]
lines[3]
lines[4]
## SUppression des espaces
grepl("\\s{1,2}.*", lines[4])
grepl("^(?!.*(new|old)).*$", "toto new", perl = TRUE)
grepl("^(?!.*(new|old)).*$", "toto", perl = TRUE)
grepl("(?!\\s{1,2}(new|old)).*$", "toto", perl = TRUE)
grepl("(?!\\s{1,2}[ ]).*$", "toto", perl = TRUE)
grepl("\\s{1,2}", " ", perl = TRUE)
grepl("\\s{1,2}", "", perl = TRUE)
grepl("^\\s{1,2}(\\#)", "#", perl = TRUE)
grepl("^\\s{1,2}(\\#)", " #", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!)", " #", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!)", " !", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|\\[a-z]|\\[A-Z])", " !", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|\\[a-z]|\\[A-Z]|\\[0-9])", " !", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|\\[a-z]|\\[A-Z]|\\[0-9])", " a", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|\\[a-z]|\\[A-Z]|\\[0-9])", " #", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|[a-z]|[A-Z]|[0-9])", " #", perl = TRUE)
grepl("^\\s{1,2}(\\#|\\!|\\[|[a-z]|[A-Z]|[0-9])", " a", perl = TRUE)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
removeLeadingSpace <- function(myLine) {
trimws(myLine, which = "left")
}
reformatLine <- function(myLine) {
newLine <- NULL
# Avec hashtags ou pas
if(isNotWellFormatted1(myLine)) {
newLine <- reformatTitle1(myLine)
}
# Avec une image au début
if(isNotWellFormatted2(myLine)) {
newLine <- reformatTitle2(myLine)
}
# Suppression des espaces au début
if(isNotWellFormatted3(myLine)) {
newLine <- removeLeadingSpace(myLine)
}
return(newLine)
}
reformatRdp <- function(rdp, year, inputFolder, outputFolder, inputEncoding = "UTF-8") {
# Lecture de la RDP
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
close(con)
# File name
fileName <- gsub("^.*/(.*\\.md)$", "\\1", rdp)
# Log file
logFile <- file.path(outputFolder, year, gsub(".md", "-log.md", fileName))
if(file.exists(logFile)) file.remove(logFile)
for(j in 1:length(lines)) {
myLine <- lines[j]
newLine <- reformatLine(myLine)
# Réaffectation
if(is.null(newLine)) {
# message("Pas de transformation")
lines[j] <- myLine
} else {
lines[j] <- newLine
message(paste0(substr(myLine, 1, 100), "=>", substr(newLine, 1, 100)))
writeLog(logFile, myLine, newLine)
}
}
# Export de la nouvelle version
repairedRdp <- file.path(outputFolder, year, fileName)
con <- file(repairedRdp, encoding = "UTF-8")
print(length(lines))
writeLines(lines, con)
close(con)
# Récupérer les images d'un article (expérimental)
# test <- lines[85]
# getImgs(test)
# message("\n")
}
myLine <- "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG"
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
# myLine <- "L'Open Data en image** tototototo"
# myLine <- " **OpenLayers Mobile**"
isNotWellFormatted1 <- function(myLine) {
grepl("^(###?\\s)?.*\\*\\*", myLine)
}
# Espaxces devant, à l'exception du YAML du début (4 espaces)
isNotWellFormatted3 <- function(myLine) {
grepl("^\\s{1,2}(\\#|\\!|\\[|[a-z]|[A-Z]|[0-9])", myLine, perl = TRUE)
}
# countHashtags("## L'Open Data en image** tototototo")
# countHashtags("### L'Open Data en image** tototototo")
# countHashtags("#### L'Open Data en image** tototototo")
countHashtags <- function(myLine) {
n <- 0
for(i in 1:4) {
hashtags <- paste(rep("#", i), collapse="")
if(grepl(sprintf("^%s\\s.*", hashtags), myLine)) n <- i
}
return(n)
}
writeLog <- function(logFile, myLine, newLine) {
write(myLine, file = logFile, append = TRUE)
write("\n\ndevient\n\n", file = logFile, append = TRUE)
write(newLine, file = logFile, append = TRUE)
write("----", file = logFile, append = TRUE)
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
isNotWellFormatted2 <- function(myLine) {
regex <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
grepl(regex, myLine)
}
reformatTitle2 <- function(myLine) {
regex <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
str_replace(myLine, regex, "\\1{: .img-rdp-news-thumb }\n### \\2\n\\3")
}
getNotWellFormatted <- function(lines) {
w <- which(sapply(1:length(lines), function(x) isNotWellFormatted(lines[[x]])))
return(list(w = w, lines = lines[w]))
}
reformatTitle1 <- function(myLine) {
hashtags <- rep("#", countHashtags(myLine)) %>% paste(collapse="")
if(hashtags == "") {
regex <- "^\\s?(?:\\*\\*)?(.*)\\*\\*\\s?(.*)$"
str_replace(myLine, regex, "### \\1\n\\2")
} else {
regex <- sprintf("^(?:%s?\\s)?(.*)\\*\\*\\s?(.*)$", hashtags)
str_replace(myLine, regex, sprintf("%s \\1\n\\2", hashtags))
}
}
# Liste les fichiers du dossier, pour l'année concernée
listRdpsForYear <- function(year) {
rdps <- list.files(sprintf("%s/%d", inputFolder, year), full.names = T)
rdps <- rdps[which(grepl("^(?!.*(new|old)).*$", rdps, perl = TRUE))]
rdps
}
imgPar <- function(img) {
regex <- "^.*!\\[(.*)\\]\\((.*)\\).*$"
imgLogo <- gsub(regex, "\\1", img)
s <- gsub("^.*!\\[(.*)\\]\\((.*)\\).*$", "\\2", img)
imgUrl <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\1", s)
imgCat <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\2", s)
img <- list(imgLogo = imgLogo, imgUrl = imgUrl, imgCat = imgCat)
return(img)
}
buildRegex <- function(i) {
sprintf(".*%s.*", paste(rep(regex, i), collapse=".*"))
}
countLinks <- function(test) {
r <- "(!\\[.*\\]\\(.*\\))"
n <- 0
for(i in 1:5) {
r2 <- buildRegex(i)
if(grepl(r2, test)) n <- i
}
return(n)
}
# myLine <- "![logo1 globe1](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\") ![logo2 globe2](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\"){: .img-rdp-news-thumb }"
# getImgs(myLine)
getImgs <- function(test) {
n <- countLinks(test)
out <- vector(mode="list")
for(i in 1:n) {
imgLink <- gsub(buildRegex(n), sprintf("\\%d", i), test)
out[[i]] <- imgPar(imgLink)
}
return(out)
}
cleanYear <- function(year) {
l <- list.files(sprintf("%s/%d", inputFolder, year), "-new.md", full.names = T)
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
file.remove(elt)
}
}
reformatLine(myLine)
reformatLine(lines[1])
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, year, inputFolder, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
rdp
gsub("^.*rdp_([0-9]*).*$", "\\1", rdp)
# Variables
year <- gsub("^.*rdp_([0-9]*).*$", "\\1", rdp) %>% as.integer()
year
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
# Issue : https://github.com/geotribu/website/issues/443
# PR : https://github.com/geotribu/website/pull/444
# Corriger les niveaux de titre
# Retirer les anciennes ancres #news
# Balises d'accessibilité manquantes
# Anciennes URLs d'images
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
# Renomme les new en normal
# cleanYear(2011)
