for(j in 1:length(lines)) {
myLine <- lines[j]
newLine <- reformatLine(myLine)
# Réaffectation
if(is.null(newLine)) {
# message("Pas de transformation")
lines[j] <- myLine
} else {
lines[j] <- newLine
message(paste0(substr(myLine, 1, 100), "\n=>\n", substr(newLine, 1, 100)))
message("\n")
}
}
return(lines)
}
# METTRE THUMB DANS LE POST
lines <- reformatTitles(lines)
lines <- relevelTitles(lines)
lines <- relocateThumbs(lines)
lines
grepl("gvSIG", lines)
grepl("gvSIG", lines) %>% which
lines[w]
grepl("gvSIG", lines) %>% which -> w
lines[w]
removeLeadingSpace <- function(myLine) {
trimws(myLine, which = "left")
}
reformatLine <- function(myLine) {
newLine <- NULL
# Avec hashtags ou pas
if(isNotWellFormatted1(myLine)) {
newLine <- reformatTitle1(myLine)
}
# Avec une image au début
if(isNotWellFormatted2(myLine)) {
newLine <- reformatTitle2(myLine)
}
# Suppression des espaces au début
if(isNotWellFormatted3(myLine)) {
if(!is.null(newLine)) {
myLine <- newLine
}
newLine <- removeLeadingSpace(myLine)
}
return(newLine)
}
readRdp <- function(rdp) {
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
close(con)
return(lines)
}
writeRdp <- function(lines, repairedRdp) {
con <- file(repairedRdp, encoding = "UTF-8")
writeLines(lines, con)
close(con)
}
relocateThumbs <- function(lines) {
newLines <- lines
for(j in 1:length(lines)) {
myLine <- lines[j]
if(grepl("\\!\\[.*\\]\\(.*\\)\\{\\: \\.img-rdp-news-thumb \\}", myLine)) {
print(j)
# On extrait un échantillon de texte
w <- c(j:(j+5))
# On recherche le titre
myLines <- lines[w]
w <- grep("^\\#+.*", myLines)
k <- (j+(w-1))
# On ajoute l'image dans le corps de l'article
newLines[k] <- paste(lines[k], lines[j], sep="\n\n")
newLines[j] <- NA
}
}
# Clean : on enlève les éléments qui sont NA
# newLines <- newLines[-which(sapply(newLines, is.na))]
return(newLines)
}
relevelTitles <- function(lines) {
for(j in 1:length(lines)) {
myLine <- lines[j]
if(grepl("\\#\\#\\#\\#.*", myLine)) {
print("NIVEAU")
w <- (j+1:(j+10))
myLines <- lines[w]
w <- which(myLines == "" | grepl("\\{\\: \\.img-rdp-news-thumb \\}", myLines))
myLines <- myLines[-w]
w <- grep("\\#+", myLines)
myLines <- myLines[w]
if(grepl("\\#\\#\\#\\s.*", myLines[1])) {
newLine <- str_replace(myLine,"^####\\s(.*)", "## \\1")
lines[j] <- newLine
message(paste0(myLine, "\n=>\n", newLine))
message("\n")
# writeLog(logFile, myLine, newLine)
}
}
}
return(lines)
}
reformatTitles <- function(lines) {
for(j in 1:length(lines)) {
myLine <- lines[j]
newLine <- reformatLine(myLine)
# Réaffectation
if(is.null(newLine)) {
# message("Pas de transformation")
lines[j] <- myLine
} else {
lines[j] <- newLine
message(paste0(substr(myLine, 1, 100), "\n=>\n", substr(newLine, 1, 100)))
message("\n")
}
}
return(lines)
}
reformatRdp <- function(rdp, outputFolder, inputEncoding = "UTF-8") {
# Variables
year <- gsub("^.*rdp_([0-9]*).*$", "\\1", rdp) %>% as.integer()
# Lecture de la RDP
lines <- readRdp(rdp)
# File name
fileName <- gsub("^.*/(.*\\.md)$", "\\1", rdp)
# Log file
logFile <- file.path(outputFolder, year, gsub(".md", "-log.md", fileName))
if(file.exists(logFile)) file.remove(logFile)
# CORRECTION DES TITRES EN GRAS -> H3
lines <- reformatTitles(lines)
# NIVEAUX DE TITRES H4 -> H3
lines <- relevelTitles(lines)
# RELOCATE THUMBNAILS
# lines <- relocateThumbs(lines)
# Export de la nouvelle version
repairedRdp <- file.path(outputFolder, year, fileName)
writeRdp(lines, repairedRdp)
message("\n")
# Récupérer les images d'un article (expérimental)
# test <- lines[85]
# getImgs(test)
}
myLine <- "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG"
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
# myLine <- "L'Open Data en image** tototototo"
# myLine <- " **OpenLayers Mobile**"
isNotWellFormatted1 <- function(myLine) {
grepl("^(###?\\s)?.*\\*\\*", myLine)
}
# Espaxces devant, à l'exception du YAML du début (4 espaces)
isNotWellFormatted3 <- function(myLine) {
grepl("^\\s{1,2}(\\#|\\!|\\[|[a-z]|[A-Z]|[0-9])", myLine, perl = TRUE)
}
# countHashtags("## L'Open Data en image** tototototo")
# countHashtags("### L'Open Data en image** tototototo")
# countHashtags("#### L'Open Data en image** tototototo")
countHashtags <- function(myLine) {
n <- 0
for(i in 1:4) {
hashtags <- paste(rep("#", i), collapse="")
if(grepl(sprintf("^%s\\s.*", hashtags), myLine)) n <- i
}
return(n)
}
writeLog <- function(logFile, myLine, newLine) {
write(myLine, file = logFile, append = TRUE)
write("\n\ndevient\n\n", file = logFile, append = TRUE)
write(newLine, file = logFile, append = TRUE)
write("\n----", file = logFile, append = TRUE)
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
isNotWellFormatted2 <- function(myLine) {
regex <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
grepl(regex, myLine)
}
reformatTitle2 <- function(myLine) {
#  ![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG**
regex1 <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.*)"
#  ![](http://www.geotribu.net/sites/default/files/Tuto/img/Blog/liftarn_Witch_with_crystal_ball.jpg)**Madame Irma en direct
regex2 <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)"
if(grepl(regex1, myLine)) {
return(str_replace(myLine, regex1, "\\1{: .img-rdp-news-thumb }\n### \\2\n\\3"))
} else if (grepl(regex2, myLine)) {
return(str_replace(myLine, regex2, "\\1{: .img-rdp-news-thumb }\n### \\2"))
}
}
getNotWellFormatted <- function(lines) {
w <- which(sapply(1:length(lines), function(x) isNotWellFormatted(lines[[x]])))
return(list(w = w, lines = lines[w]))
}
reformatTitle1 <- function(myLine) {
hashtags <- rep("#", countHashtags(myLine)) %>% paste(collapse="")
if(hashtags == "") {
regex <- "^\\s?(?:\\*\\*)?(.*)\\*\\*\\s?(.*)$"
str_replace(myLine, regex, "### \\1\n\\2")
} else {
regex <- sprintf("^(?:%s?\\s)?(.*)\\*\\*\\s?(.*)$", hashtags)
str_replace(myLine, regex, sprintf("%s \\1\n\\2", hashtags))
}
}
# Liste les fichiers du dossier, pour l'année concernée
listRdpsForYear <- function(year) {
rdps <- list.files(sprintf("%s/%d", inputFolder, year), full.names = T)
rdps <- rdps[which(grepl("^(?!.*(new|old)).*$", rdps, perl = TRUE))]
rdps
}
imgPar <- function(img) {
regex <- "^.*!\\[(.*)\\]\\((.*)\\).*$"
imgLogo <- gsub(regex, "\\1", img)
s <- gsub("^.*!\\[(.*)\\]\\((.*)\\).*$", "\\2", img)
imgUrl <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\1", s)
imgCat <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\2", s)
img <- list(imgLogo = imgLogo, imgUrl = imgUrl, imgCat = imgCat)
return(img)
}
buildRegex <- function(i) {
sprintf(".*%s.*", paste(rep(regex, i), collapse=".*"))
}
countLinks <- function(test) {
r <- "(!\\[.*\\]\\(.*\\))"
n <- 0
for(i in 1:5) {
r2 <- buildRegex(i)
if(grepl(r2, test)) n <- i
}
return(n)
}
# myLine <- "![logo1 globe1](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\") ![logo2 globe2](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\"){: .img-rdp-news-thumb }"
# getImgs(myLine)
getImgs <- function(test) {
n <- countLinks(test)
out <- vector(mode="list")
for(i in 1:n) {
imgLink <- gsub(buildRegex(n), sprintf("\\%d", i), test)
out[[i]] <- imgPar(imgLink)
}
return(out)
}
cleanYear <- function(year) {
l <- list.files(sprintf("%s/%d", inputFolder, year), "-new.md", full.names = T)
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
file.remove(elt)
}
}
lines <- readRdp(rdp)
# METTRE THUMB DANS LE POST
lines <- reformatTitles(lines)
lines <- relevelTitles(lines)
lines <- relocateThumbs(lines)
grepl("gvSIG", lines) %>% which -> w
lines[w]
rdp
# reformatRdp(rdp, outputFolder)
writeRdp(lines, "temp.md")
lines <- readRdp(rdp)
# METTRE THUMB DANS LE POST
lines <- reformatTitles(lines)
lines <- relevelTitles(lines)
# lines <- relocateThumbs(lines)
grepl("gvSIG", lines) %>% which -> w
lines[w]
# reformatRdp(rdp, outputFolder)
writeRdp(lines, "temp.md")
removeLeadingSpace <- function(myLine) {
trimws(myLine, which = "left")
}
reformatLine <- function(myLine) {
newLine <- NULL
# Avec hashtags ou pas
if(isNotWellFormatted1(myLine)) {
newLine <- reformatTitle1(myLine)
}
# Avec une image au début
if(isNotWellFormatted2(myLine)) {
newLine <- reformatTitle2(myLine)
}
# Suppression des espaces au début
if(isNotWellFormatted3(myLine)) {
if(!is.null(newLine)) {
myLine <- newLine
}
newLine <- removeLeadingSpace(myLine)
}
return(newLine)
}
readRdp <- function(rdp) {
con <- file(rdp, "r", encoding = "UTF-8")
lines <- readLines(con)
close(con)
return(lines)
}
writeRdp <- function(lines, repairedRdp) {
con <- file(repairedRdp, encoding = "UTF-8")
writeLines(lines, con)
close(con)
}
relocateThumbs <- function(lines) {
newLines <- lines
for(j in 1:length(lines)) {
myLine <- lines[j]
if(grepl("\\!\\[.*\\]\\(.*\\)\\{\\: \\.img-rdp-news-thumb \\}", myLine)) {
print(j)
# On extrait un échantillon de texte
w <- c(j:(j+5))
# On recherche le titre
myLines <- lines[w]
w <- grep("^\\#+.*", myLines)
k <- (j+(w-1))
# On ajoute l'image dans le corps de l'article
newLines[k] <- paste(lines[k], lines[j], sep="\n\n")
newLines[j] <- NA
}
}
# Clean : on enlève les éléments qui sont NA
# newLines <- newLines[-which(sapply(newLines, is.na))]
return(newLines)
}
relevelTitles <- function(lines) {
for(j in 1:length(lines)) {
myLine <- lines[j]
if(grepl("\\#\\#\\#\\#.*", myLine)) {
print("NIVEAU")
w <- (j+1:(j+10))
myLines <- lines[w]
w <- which(myLines == "" | grepl("\\{\\: \\.img-rdp-news-thumb \\}", myLines))
myLines <- myLines[-w]
w <- grep("\\#+", myLines)
myLines <- myLines[w]
if(grepl("\\#\\#\\#\\s.*", myLines[1])) {
newLine <- str_replace(myLine,"^####\\s(.*)", "## \\1")
lines[j] <- newLine
message(paste0(myLine, "\n=>\n", newLine))
message("\n")
# writeLog(logFile, myLine, newLine)
}
}
}
return(lines)
}
reformatTitles <- function(lines) {
for(j in 1:length(lines)) {
myLine <- lines[j]
newLine <- reformatLine(myLine)
# Réaffectation
if(is.null(newLine)) {
# message("Pas de transformation")
lines[j] <- myLine
} else {
lines[j] <- newLine
message(paste0(substr(myLine, 1, 100), "\n=>\n", substr(newLine, 1, 100)))
message("\n")
}
}
return(lines)
}
reformatRdp <- function(rdp, outputFolder, inputEncoding = "UTF-8") {
# Variables
year <- gsub("^.*rdp_([0-9]*).*$", "\\1", rdp) %>% as.integer()
# Lecture de la RDP
lines <- readRdp(rdp)
# File name
fileName <- gsub("^.*/(.*\\.md)$", "\\1", rdp)
# Log file
logFile <- file.path(outputFolder, year, gsub(".md", "-log.md", fileName))
if(file.exists(logFile)) file.remove(logFile)
# CORRECTION DES TITRES EN GRAS -> H3
lines <- reformatTitles(lines)
# NIVEAUX DE TITRES H4 -> H3
lines <- relevelTitles(lines)
# RELOCATE THUMBNAILS
# lines <- relocateThumbs(lines)
# Export de la nouvelle version
repairedRdp <- file.path(outputFolder, year, fileName)
writeRdp(lines, repairedRdp)
message("\n")
# Récupérer les images d'un article (expérimental)
# test <- lines[85]
# getImgs(test)
}
myLine <- "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**Filtres temporels dans GvSIG"
# myLine <- "### L'Open Data en image** tototototo"
# myLine <- "## L'Open Data en image** tototototo"
# myLine <- "L'Open Data en image** tototototo"
# myLine <- " **OpenLayers Mobile**"
isNotWellFormatted1 <- function(myLine) {
grepl("^(###?\\s)?.*\\*\\*", myLine)
}
# Espaxces devant, à l'exception du YAML du début (4 espaces)
isNotWellFormatted3 <- function(myLine) {
grepl("^\\s{1,2}(\\#|\\!|\\[|[a-z]|[A-Z]|[0-9])", myLine, perl = TRUE)
}
# countHashtags("## L'Open Data en image** tototototo")
# countHashtags("### L'Open Data en image** tototototo")
# countHashtags("#### L'Open Data en image** tototototo")
countHashtags <- function(myLine) {
n <- 0
for(i in 1:4) {
hashtags <- paste(rep("#", i), collapse="")
if(grepl(sprintf("^%s\\s.*", hashtags), myLine)) n <- i
}
return(n)
}
writeLog <- function(logFile, myLine, newLine) {
write(myLine, file = logFile, append = TRUE)
write("\n\ndevient\n\n", file = logFile, append = TRUE)
write(newLine, file = logFile, append = TRUE)
write("\n----", file = logFile, append = TRUE)
}
# "![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG** La 7ème édition des journées "
isNotWellFormatted2 <- function(myLine) {
regex <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*?\\*?(.*)"
grepl(regex, myLine)
}
reformatTitle2 <- function(myLine) {
#  ![logo-gvsig_150_14.gif](http://geotribu.net/sites/default/files/Tuto/img/divers/logo-gvsig_150_14.gif)**gvSIG**
regex1 <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)\\*\\*(.*)"
#  ![](http://www.geotribu.net/sites/default/files/Tuto/img/Blog/liftarn_Witch_with_crystal_ball.jpg)**Madame Irma en direct
regex2 <- "\\s?(\\!\\[.*\\]\\(.*\\))\\*\\*(.*)"
if(grepl(regex1, myLine)) {
return(str_replace(myLine, regex1, "\\1{: .img-rdp-news-thumb }\n### \\2\n\\3"))
} else if (grepl(regex2, myLine)) {
return(str_replace(myLine, regex2, "\\1{: .img-rdp-news-thumb }\n### \\2"))
}
}
getNotWellFormatted <- function(lines) {
w <- which(sapply(1:length(lines), function(x) isNotWellFormatted(lines[[x]])))
return(list(w = w, lines = lines[w]))
}
reformatTitle1 <- function(myLine) {
hashtags <- rep("#", countHashtags(myLine)) %>% paste(collapse="")
if(hashtags == "") {
regex <- "^\\s?(?:\\*\\*)?(.*)\\*\\*\\s?(.*)$"
str_replace(myLine, regex, "### \\1\n\\2")
} else {
regex <- sprintf("^(?:%s?\\s)?(.*)\\*\\*\\s?(.*)$", hashtags)
str_replace(myLine, regex, sprintf("%s \\1\n\\2", hashtags))
}
}
# Liste les fichiers du dossier, pour l'année concernée
listRdpsForYear <- function(year) {
rdps <- list.files(sprintf("%s/%d", inputFolder, year), full.names = T)
rdps <- rdps[which(grepl("^(?!.*(new|old)).*$", rdps, perl = TRUE))]
rdps
}
imgPar <- function(img) {
regex <- "^.*!\\[(.*)\\]\\((.*)\\).*$"
imgLogo <- gsub(regex, "\\1", img)
s <- gsub("^.*!\\[(.*)\\]\\((.*)\\).*$", "\\2", img)
imgUrl <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\1", s)
imgCat <- gsub("^(.*)\\s?\\\"(.*)\\\"$", "\\2", s)
img <- list(imgLogo = imgLogo, imgUrl = imgUrl, imgCat = imgCat)
return(img)
}
buildRegex <- function(i) {
sprintf(".*%s.*", paste(rep(regex, i), collapse=".*"))
}
countLinks <- function(test) {
r <- "(!\\[.*\\]\\(.*\\))"
n <- 0
for(i in 1:5) {
r2 <- buildRegex(i)
if(grepl(r2, test)) n <- i
}
return(n)
}
# myLine <- "![logo1 globe1](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\") ![logo2 globe2](https://cdn.geotribu.fr/img/internal/icons-rdp-news/world.png \"Icône de globe\"){: .img-rdp-news-thumb }"
# getImgs(myLine)
getImgs <- function(test) {
n <- countLinks(test)
out <- vector(mode="list")
for(i in 1:n) {
imgLink <- gsub(buildRegex(n), sprintf("\\%d", i), test)
out[[i]] <- imgPar(imgLink)
}
return(out)
}
cleanYear <- function(year) {
l <- list.files(sprintf("%s/%d", inputFolder, year), "-new.md", full.names = T)
for(elt in l) {
file.rename(elt, gsub("-new.md", ".md", elt))
file.remove(elt)
}
}
# Issue : https://github.com/geotribu/website/issues/443
# PR : https://github.com/geotribu/website/pull/444
# Corriger les niveaux de titre
# Retirer les anciennes ancres #news
# Balises d'accessibilité manquantes
# Anciennes URLs d'images
library(tidyverse)
library(stringr)
source("helpers.R", encoding = "UTF-8")
year <- 2011
inputFolder <<-  "../../rdp/"
outputFolder <<- "../../website/content/rdp"
reformatYear <- function(year, inputFolder, outputFolder) {
rdps <- listRdpsForYear(year)
# Transformation fichier par fichier
for(i in 1:length(rdps)) {
rdp <- rdps[i]
message(">> ", i, " : ", rdp)
reformatRdp(rdp, outputFolder)
}
}
# Reformate toutes les rdps d'une année
reformatYear(year, inputFolder, outputFolder) # reformater une année
# Reformate une rdp
# reformatRdp("../../website/content/rdp/2011/rdp_2011-12-23.md") # reformater une rdp
# reformatRdp("../../rdp//2012/rdp_2012-06-04.md", 2012, inputFolder, outputFolder) # reformater une rdp
grepl("gvSIG", lines) %>% which -> w
lines[w]
